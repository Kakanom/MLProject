import os
import torch
import torchvision
import sys

root_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(root_dir)

from model_train import create_model
from torchvision import transforms
from config import *
from telegram.ext import Application, CommandHandler, MessageHandler, filters, \
    CallbackContext
from telegram import Update, ReplyKeyboardMarkup
from PIL import Image
import logging

DEVICE = "cuda" if torch.cuda.is_available() else "cpu"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
def load_model(model_path="models/ResNet50_30epoch.pth", device=DEVICE):
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –ø—É—Ç–∏: {model_path}")
    try:
        model = create_model(num_classes=2, device=device)
        model.load_state_dict(torch.load(model_path, map_location=device))
        model.to(device)
        model.eval()
        logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏ (eval)")
        return model
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        raise


# –í–µ—Å–∞
def get_transforms(weight_path="models/ResNet50.pth"):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    try:
        weights = torchvision.models.ResNet50_Weights.DEFAULT
        return weights.transforms()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π: {e}")
        raise


def predict_image(image_path, model, transform, class_names=None, device=DEVICE):
    if class_names is None:
        class_names = ['Fake', 'Real']
    logger.info(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
    try:
        img = Image.open(image_path).convert('RGB')
        img = transform(img).unsqueeze(0).to(device)

        with torch.inference_mode():
            pred_logits = model(img)
            logger.info(f"–õ–æ–≥–∏—Ç—ã –º–æ–¥–µ–ª–∏: {pred_logits.cpu().numpy()}")  # –í—ã–≤–æ–¥–∏–º —Å—ã—Ä—ã–µ –ª–æ–≥–∏—Ç—ã

            pred_probs = torch.softmax(pred_logits, dim=1)
            logger.info(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤ (–ø–æ—Å–ª–µ softmax): {pred_probs.cpu().numpy()}")  # –í—ã–≤–æ–¥–∏–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏

            pred_label = torch.argmax(pred_probs, dim=1).item()
            prob = pred_probs.max().item() * 100

        logger.info(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ: {class_names[pred_label]} —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {prob:.2f}%")
        return class_names[pred_label], prob

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
        raise


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: CallbackContext):
    logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å /start")
    keyboard = [["üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç IsRealBot. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è —Å–∫–∞–∂—É, –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–Ω–æ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é!",
        reply_markup=reply_markup
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ ---
async def handle_photo(update: Update, context: CallbackContext):
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    file_path = f"received_{photo.file_id}.jpg"
    await file.download_to_drive(file_path)
    logger.info(f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {file_path}")

    model = load_model()
    transform = get_transforms()
    pred_label, prob = predict_image(file_path, model, transform)

    if prob > 60:
        response = f"–Ø —É–≤–µ—Ä–µ–Ω –Ω–∞ {prob:.2f}%, —á—Ç–æ —ç—Ç–æ {pred_label.lower()} —Ñ–æ—Ç–æ.\n"
        if pred_label == 'Fake':
            response += "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –æ–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é!"
        else:
            response += "–≠—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Ñ–æ—Ç–æ."
    else:
        response = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —Ñ–æ—Ç–æ {pred_label.lower()}: {prob:.2f}%.\n" \
                   f"–Ø –Ω–µ —Å–æ–≤—Å–µ–º —É–≤–µ—Ä–µ–Ω, –Ω–æ —Å–∫–ª–æ–Ω—è—é—Å—å –∫ —Ç–æ–º—É, —á—Ç–æ —ç—Ç–æ {pred_label.lower()}."

    await update.message.reply_text(response)
    logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {response}")

    if os.path.exists(file_path):
        os.remove(file_path)
        logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω")


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    app.run_polling()


if __name__ == "__main__":
    main()
